diff --git a/config.mk b/config.mk
index 0185027..f5af2b4 100644
--- a/config.mk
+++ b/config.mk
@@ -69,7 +69,7 @@ WITH_SRV:=no
 WITH_UUID:=yes
 
 # Build with websockets support on the broker.
-WITH_WEBSOCKETS:=no
+WITH_WEBSOCKETS:=yes
 
 # Use elliptic keys in broker
 WITH_EC:=yes
@@ -266,7 +266,7 @@ ifeq ($(WITH_DOCS),yes)
 endif
 
 INSTALL?=install
-prefix=/usr/local
+prefix=/g/pkg
 mandir=${prefix}/share/man
 localedir=${prefix}/share/locale
 STRIP?=strip
diff --git a/src/handle_connect.c b/src/handle_connect.c
index 5ff42db..f74a4e3 100644
--- a/src/handle_connect.c
+++ b/src/handle_connect.c
@@ -443,7 +443,10 @@ int handle__connect(struct mosquitto_db *db, struct mosquitto *context)
 	}else{
 #endif /* WITH_TLS */
 		if(username_flag){
+			const char *saved_id = context->id;
+			context->id = client_id;
 			rc = mosquitto_unpwd_check(db, context, username, password);
+			context->id = saved_id;
 			switch(rc){
 				case MOSQ_ERR_SUCCESS:
 					break;
diff --git a/src/mosquitto_broker_internal.h b/src/mosquitto_broker_internal.h
index 92fac93..7ab127d 100644
--- a/src/mosquitto_broker_internal.h
+++ b/src/mosquitto_broker_internal.h
@@ -311,6 +311,7 @@ typedef int (*FUNC_auth_plugin_security_cleanup_v3)(void *, struct mosquitto_opt
 typedef int (*FUNC_auth_plugin_acl_check_v3)(void *, int, const struct mosquitto *, struct mosquitto_acl_msg *);
 typedef int (*FUNC_auth_plugin_unpwd_check_v3)(void *, const struct mosquitto *, const char *, const char *);
 typedef int (*FUNC_auth_plugin_psk_key_get_v3)(void *, const struct mosquitto *, const char *, const char *, char *, int);
+typedef int (*FUNC_auth_plugin_connect_check)(void *, const struct mosquitto *, const char *, const char *, const char *, int);
 
 typedef int (*FUNC_auth_plugin_init_v2)(void **, struct mosquitto_auth_opt *, int);
 typedef int (*FUNC_auth_plugin_cleanup_v2)(void *, struct mosquitto_auth_opt *, int);
@@ -332,6 +333,7 @@ struct mosquitto__auth_plugin{
 	FUNC_auth_plugin_acl_check_v3 acl_check_v3;
 	FUNC_auth_plugin_unpwd_check_v3 unpwd_check_v3;
 	FUNC_auth_plugin_psk_key_get_v3 psk_key_get_v3;
+	FUNC_auth_plugin_connect_check connect_check;
 
 	FUNC_auth_plugin_init_v2 plugin_init_v2;
 	FUNC_auth_plugin_cleanup_v2 plugin_cleanup_v2;
diff --git a/src/mosquitto_plugin.h b/src/mosquitto_plugin.h
index bd80639..ea71905 100644
--- a/src/mosquitto_plugin.h
+++ b/src/mosquitto_plugin.h
@@ -235,6 +235,7 @@ int mosquitto_auth_acl_check(void *user_data, int access, const struct mosquitto
  */
 int mosquitto_auth_unpwd_check(void *user_data, const struct mosquitto *client, const char *username, const char *password);
 
+int mosquitto_auth_connect_check(void *user_data, const struct mosquitto *client, const char *username, const char *password, const char *clientid, int sd);
 
 /*
  * Function: mosquitto_psk_key_get
diff --git a/src/security.c b/src/security.c
index 1f4ab01..1f0b2c0 100644
--- a/src/security.c
+++ b/src/security.c
@@ -166,6 +166,14 @@ int security__load_v3(struct mosquitto_db *db, struct mosquitto__auth_plugin *pl
 		return 1;
 	}
 
+	if(!(plugin->connect_check = (FUNC_auth_plugin_connect_check)LIB_SYM(lib, "mosquitto_auth_connect_check"))){
+		log__printf(NULL, MOSQ_LOG_ERR,
+				"Error: Unable to load auth plugin function mosquitto_auth_connect_check().");
+		LIB_ERROR();
+		LIB_CLOSE(lib);
+		return 1;
+	}
+
 	if(!(plugin->psk_key_get_v3 = (FUNC_auth_plugin_psk_key_get_v3)LIB_SYM(lib, "mosquitto_auth_psk_key_get"))){
 		log__printf(NULL, MOSQ_LOG_ERR,
 				"Error: Unable to load auth plugin function mosquitto_auth_psk_key_get().");
@@ -427,6 +435,10 @@ int mosquitto_unpwd_check(struct mosquitto_db *db, struct mosquitto *context, co
 	for(i=0; i<db->auth_plugin_count; i++){
 		if(db->auth_plugins[i].version == 3){
 			rc = db->auth_plugins[i].unpwd_check_v3(db->auth_plugins[i].user_data, context, username, password);
+			if (rc == MOSQ_ERR_SUCCESS) {
+				rc = db->auth_plugins[i].connect_check(db->auth_plugins[i].user_data, context, username, password, context->id, context->sock);
+			}
+
 		}else if(db->auth_plugins[i].version == 2){
 			rc = db->auth_plugins[i].unpwd_check_v2(db->auth_plugins[i].user_data, username, password);
 		}else{
